package com.boa.eagls.government.service;

import com.boa.eagls.government.dto.HierarchyDTO;
import org.apache.log4j.Logger;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

/**
 * Created by IntelliJ IDEA.
 * User: OlegK
 * Date: 25.06.2003
 * Time: 17:38:59
 */
public abstract class Service {
    private static final Logger logger = Logger.getLogger(Service.class);

    //private static final String JNDI_NAME = "java:comp/env/jdbc/boa";
    private static final String JNDI_NAME = "jdbc/boa";

    private static DataSource source = null;
    private static final Object LOCK = new Object();

    public static final int[] getCurrentShortHierarchy(HierarchyDTO[] hierarchy) {
        int[] intArray;
        if (hierarchy != null) {
            intArray = new int[hierarchy.length];
            for (int i = 0; i < intArray.length; i++) {
                if (hierarchy[i] != null) {
                    intArray[i] = hierarchy[i].getNumber();
                } else {
                    intArray[i] = 0;
                }
            }
        } else {
            //todo check how to fill
            intArray = new int[9];
            for (int i = 0; i < 9; i++) {
                intArray[i] = 0;
            }
        }
        return intArray;
    }

    protected static final Connection getPooledConnection() throws SQLException {
        if (source == null) {
            InitialContext ic = null;
            synchronized (LOCK) {
                if (source == null)
                    try {
                        ic = new InitialContext();
                        source = (DataSource) ic.lookup(JNDI_NAME);
                    } catch (NamingException e) {
                            logger.fatal(JNDI_NAME + " DataSource not found", e);
                            throw new SQLException(e.getMessage());
                    }
            }
        }
        return source.getConnection();
    }

    protected static final void closeConnection(Connection conn) {
        try {
            if (conn != null)
                conn.close();
        } catch (SQLException e) {
            logger.error("Connection can't be closed", e);
        }
    }

}
