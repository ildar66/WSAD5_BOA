package com.boa.eagls.government.service;

import com.boa.eagls.government.service.Service;
import com.boa.eagls.government.service.userprofile.UserAccountService;
import com.boa.eagls.government.dao.AccountDAO;
import com.boa.eagls.government.dao.AgencyDAO;
import com.boa.eagls.government.exceptions.application.EaglsException;
import com.boa.eagls.government.dto.HierarchyDTO;
import com.boa.eagls.government.dto.CentralOffice;
import com.boa.eagls.government.dto.hierarchy.BrowseHierarchyFields;
import com.boa.eagls.government.dto.account.CentralAccount;
import com.boa.eagls.government.dto.agency.AgencyCore;
import com.boa.eagls.government.util.HierarchyDisplay;
import com.boa.eagls.government.util.HTMLFormat;
import com.boa.eagls.government.constants.service.Role;
import com.boa.eagls.government.dto.NameDescTable;
import com.boa.eagls.government.exceptions.NBException;

import java.sql.SQLException;
import java.sql.Connection;
import java.util.Map;

import org.apache.log4j.Logger;

import javax.servlet.http.HttpServletRequest;

/**
 * Service for Central Account operations
 * @author Oleg Klimenko
 * Date: 28.06.2003
 * Time: 13:38:53
 */
public class AccountService extends Service {
	private static final Logger logger = Logger.getLogger(AccountService.class);

	public static CentralOffice retrieveCentralOffice(
		int agencyID,
		int[] hierarchy,
		String userId)
		throws EaglsException {
		return retrieveCentralOffice(agencyID, hierarchy, true, userId);
	}

	public static CentralOffice retrieveCentralOffice(
		int agencyID,
		int[] hierarchy,
		boolean isSetup,
		String userId)
		throws EaglsException {

		Connection conn = null;
		try {
			conn = getPooledConnection();
			AgencyDAO adapter = new AgencyDAO();
			return adapter.retrieveCentralOfficeDetail(
				conn,
				hierarchy,
				agencyID,
				isSetup,
				userId);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// todo logger system exceptions into DB table (as specified)
			//todo rethrow new exception. It should be exception of Web Layer
			throw new EaglsException("error.retrieveCentralOffice");
			//            logger.debug(this, e);
		} finally {
			closeConnection(conn);
		}
	}

	public static CentralAccount retrieveAcctID(
		int centralAccountID,
		String userID,
		AgencyCore agency,
		String currentBaseRole,
		HierarchyDTO[] currentHierarchy,
		String lastName,
		String firstName,
		String socialSecurityNumber)
		throws EaglsException {
		Connection conn = null;
		CentralAccount centralAccount = null;
		try {
			conn = getPooledConnection();
			AccountDAO adapter = new AccountDAO(conn);

			// getting
			HierarchyDisplay hDisplay = null;
			HierarchyDTO[] hier;

			if (!Role.GCSU.equals(currentBaseRole)) {
				hier = currentHierarchy;
				int[] hierarchyD = new HierarchyDisplay(hier).getValues();
				try {
					String hierarchyNbr =
						HierarchyBase.getHierarchyNumber(hierarchyD);
					UserAccountService userAccountService =
						new UserAccountService(null);

					//                hDisplay = AccountController.getHierarchyAgencyNames(new Integer(hierarchyNbr).intValue(), das);
					hDisplay =
						userAccountService.getHierarchyAgencyNames(
							new Integer(hierarchyNbr).intValue());
				} catch (Exception e) {
					logger.error(e.getMessage(), e);
				} //end catch NBException
			} else {
				hier = agency.getAHierarchy();
				hDisplay = new HierarchyDisplay(hier);
			}
			centralAccount.setBrowseHierarchyFields(
				fillHierarchyBean(
					hDisplay,
					currentHierarchy,
					currentBaseRole,
					true));
			//        request.getSession().setAttribute("browseHierarchyFields", browseHierarchyFields);

			///////////////////////////////

			centralAccount =
				adapter.retrieveCentralAcctByCentralAcctID(
					conn,
					centralAccountID,
					agency,
					userID,
					currentBaseRole,
					currentHierarchy,
					lastName,
					firstName,
					socialSecurityNumber,
					hier,
					hDisplay);
			centralAccount.setTxt_acctCenterID(
				String.valueOf(centralAccountID));
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// todo logger system exceptions into DB table (as specified)
			//todo rethrow new exception. It should be exception of Web Layer
			//            throw new EaglsException("error.centralAccountDoesntExist");
			//            logger.debug(this, e);
		} finally {
			closeConnection(conn);
		}
		return centralAccount;
	}

	private static BrowseHierarchyFields fillHierarchyBean(
		HierarchyDisplay hierarchy,
		HierarchyDTO[] currentHierarchy,
		String currentBaseRole,
		boolean edit) {
		return fillHierarchyBean(
			hierarchy,
			currentHierarchy,
			currentBaseRole,
			edit,
			false);
	}

	private static BrowseHierarchyFields fillHierarchyBean(
		HierarchyDisplay hierarchy,
		HierarchyDTO[] currentHierarchy,
		String currentBaseRole,
		boolean edit,
		boolean hL1Lock) {
		String curSegment = null;
		String curAgencyName = null;
		BrowseHierarchyFields browseHierarchyFields =
			new BrowseHierarchyFields();
		String EDIT_HL_NUMBER[] = new String[hierarchy.NUMBER_OF_SEGMENTS];
		String YESEDIT_HL_NUMBER[] = new String[hierarchy.NUMBER_OF_SEGMENTS];
		String HL_NUMBER[] = new String[hierarchy.NUMBER_OF_SEGMENTS];
		String EDIT_HL_DESCRIPTION[] = new String[hierarchy.NUMBER_OF_SEGMENTS];
		String HL_DESCRIPTION[] = new String[hierarchy.NUMBER_OF_SEGMENTS];
		if (edit) {
			for (int i = 0; i < hierarchy.NUMBER_OF_SEGMENTS; i++) {
				int hlval = 0;
				if (currentHierarchy != null
					&& !Role.GCSU.equals(currentBaseRole)) {
					hlval = currentHierarchy[i].getNumber();
				}

				if (hlval == 0) {
					if ((i == 0 || i == 1) && hL1Lock) {
						EDIT_HL_NUMBER[i] = "";
						YESEDIT_HL_NUMBER[i] = null;
						//                        template.putString("EDIT.HL" + i + ".NUMBER", "");
						//                        template.putString("YESEDIT.HL" + i + ".NUMBER", null);
					} else {
						EDIT_HL_NUMBER[i] = null;
						YESEDIT_HL_NUMBER[i] = "";
						//                        template.putString("EDIT.HL" + i + ".NUMBER", null);
						//                        template.putString("YESEDIT.HL" + i + ".NUMBER", "");
					}
				} else {
					EDIT_HL_NUMBER[i] = "";
					YESEDIT_HL_NUMBER[i] = null;
					//                    template.putString("EDIT.HL" + i + ".NUMBER", "");
					//                    template.putString("YESEDIT.HL" + i + ".NUMBER", null);
				}

				curSegment = hierarchy.getSegment(i);
				if (curSegment == null) {
					curSegment = "";
				}
				HL_NUMBER[i] = curSegment;
				EDIT_HL_DESCRIPTION[i] = "";
				//                template.putString("HL" + i + ".NUMBER", curSegment);
				//                template.putString("EDIT.HL" + i + ".DESCRIPTION", "");

				curAgencyName = hierarchy.getAgencyName(i);
				if (curAgencyName == null || "".equals(curAgencyName)) {
					curAgencyName = "&nbsp;"; //&#160";
				}
				HL_DESCRIPTION[i] = HTMLFormat.htmlReplace(curAgencyName, '\"');
				//                template.putString("HL" + i + ".DESCRIPTION", util.nb.gsa.HTMLFormat.htmlReplace(curAgencyName, '\"'));
			}

		} else {
			for (int i = 0; i < hierarchy.NUMBER_OF_SEGMENTS; i++) {
				EDIT_HL_NUMBER[i] = "";
				YESEDIT_HL_NUMBER[i] = null;
				//                template.putString("EDIT.HL" + i + ".NUMBER", "");
				//                template.putString("YESEDIT.HL" + i + ".NUMBER", null);
				curSegment = hierarchy.getSegment(i);
				if (curSegment == null || "".equals(curSegment)) {
					curSegment = "";
				}
				HL_NUMBER[i] = curSegment;
				EDIT_HL_DESCRIPTION[i] = "";
				//                template.putString("HL" + i + ".NUMBER", curSegment);
				//                template.putString("EDIT.HL" + i + ".DESCRIPTION", "");

				curAgencyName = hierarchy.getAgencyName(i);
				if (curAgencyName == null || "".equals(curAgencyName)) {
					curAgencyName = "";
				}
				HL_DESCRIPTION[i] = HTMLFormat.htmlReplace(curAgencyName, '\"');
			}
		}
		browseHierarchyFields.setEditHlNumber(EDIT_HL_NUMBER);
		browseHierarchyFields.setYesEditHlNumber(YESEDIT_HL_NUMBER);
		browseHierarchyFields.setHlNumber(HL_NUMBER);
		browseHierarchyFields.setEditHlDescription(EDIT_HL_DESCRIPTION);
		browseHierarchyFields.setHlDescription(HL_DESCRIPTION);
		browseHierarchyFields.setGCSU("GCSU".equals(currentBaseRole));
		return browseHierarchyFields;
	}

	/**
	 * used by ViewAccountAction
	 * @param centralAccountID
	 * @return
	 */
	public static AgencyCore retrieveAgencyCoreByCentralAcctID(
		int centralAccountID,
		String userID)
		throws EaglsException {

		Connection conn = null;
		try {
			conn = getPooledConnection();
			AccountDAO adapter = new AccountDAO(conn);
			return adapter.retrieveAgencyCoreByCentralAcctID(
				conn,
				centralAccountID,
				userID);
		} catch (Exception e) {
			// todo logger system exceptions into DB table (as specified)
			//todo rethrow new exception. It should be exception of Web Layer
			logger.error(e.getMessage(), e);
			throw new EaglsException("error.centralAccountDoesntExist");
			//            logger.debug(this, e);
		} finally {
			closeConnection(conn);
		}
	}

	public static boolean validateCentralAcctIDForSetup(
		int centralAccountID,
		Map htUserData,
		String userID)
		throws EaglsException {
		boolean res = false;
		Connection conn = null;
		try {
			//session.getCurrentBaseRole(request)
			conn = getPooledConnection();
			// todo pack's lagacy code. Remove connection from constructor to method calls
			AccountDAO adapter = new AccountDAO(conn); //aDASTransport);
			int[] hierarchy =
				getCurrentShortHierarchy(
					(HierarchyDTO[]) htUserData.get("currentHierarchy"));
			//check for current base role
			if (("A_OPC")
				.equalsIgnoreCase((String) htUserData.get("currentRole"))) {
				res =
					adapter.validateCentralAcctIDForSetup(
						conn,
						centralAccountID,
						hierarchy);
			} else {
				//don't need a conn as parameter dut to pack's code
				res =
					adapter.validateCentralAcctID(
						conn,
						centralAccountID,
						userID);
			}
		} catch (Exception e) {
			// todo logger system exceptions into DB table (as specified)
			//todo rethrow new exception. It should be exception of Web Layer
			logger.error(e.getMessage(), e);
			//            throw new EaglsException("error.centralAccountDoesntExist");
			//            logger.debug(this, e);
		} finally {
			closeConnection(conn);
		}
		return res;
	}

	public static NameDescTable[] retrieveVendorNames(String centralAcctID)
		throws EaglsException {
		Connection conn = null;
		try {
			conn = getPooledConnection();
			AccountDAO adapter = new AccountDAO(conn);
			return adapter.retrieveVendorNames(conn, centralAcctID);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// todo log system exceptions into DB table (as specified)
			//todo rethrow new exception. It should be exception of Web Layer
			throw new EaglsException("error.retrieveVendorNames");
			//            logger.debug(this, e);
		} finally {
			closeConnection(conn);
		}
	}

	public static NameDescTable[] retrieveMCCGTableNamesByCentralAcctID(String centralAcctID)
		throws EaglsException {
		Connection conn = null;
		try {
			conn = getPooledConnection();
			AccountDAO adapter = new AccountDAO(conn);
			return adapter.retrieveMCCGTableNamesByCentralAcctID(conn, centralAcctID);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// todo log system exceptions into DB table (as specified)
			//todo rethrow new exception. It should be exception of Web Layer
			throw new EaglsException("error.retrieveMCCGTableNamesByCentralAcctID");
			//            logger.debug(this, e);
		} finally {
			closeConnection(conn);
		}
	}

}
